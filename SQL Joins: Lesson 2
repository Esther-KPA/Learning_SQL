.sql

/*
Notice

Notice our SQL query has the two tables we would 
like to join - one in the FROM and the other in the JOIN. Then in the ON, we will ALWAYs have the PK equal to the FK: */

## Joining three tables together;

/*
SELECT *
FROM web_events
JOIN accounts
ON web_events.account_id = accounts.id
JOIN orders
ON accounts.id = orders.account_id

*/

/*
Provide a table for all web_events associated with the account name of Walmart. There should be three columns. 
Be sure to include the primary_poc, time of the event, and the channel for each event. 
Additionally, you might choose to add a fourth column to assure only Walmart events were chosen.  */

Solution:

SELECT *
FROM web_events
JOIN accounts
ON 

Corrected Solution:

SELECT a.primary_poc, w.occurred_at, w.channel, a.name
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
WHERE a.name = 'Walmart';

    

    /*
    Provide a table that provides the region for each sales_rep along with their associated accounts. Your final table 
    should include three columns: the region name, the sales rep name, and the account name. Sort the accounts alphabetically (A-Z) 
    according to the account name.   */

    Solution;
    
    SELECT region_id, sales_rep_id, account_id
    FROM sales_rep
    ORDER BY account_id DESC
    JOIN accounts
    ON sales_rep_id = accounts.id;
    
    Corrected Solution;
    
    SELECT r.name region, s.name rep, a.name account
    FROM sales_reps s
    JOIN region r
    ON s.region_id = r.id
    JOIN accounts a
    ON a.sales_rep_id = s.id
    ORDER BY a.name;
    
    
    /*
    Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) 
    for the order. Your final table should have 3 columns: region name, account name, and unit price. A few accounts have 0 for total, so 
    I divided by (total + 0.01) to assure not dividing by zero.   */

    Solution:
    
    SELECT r.name region, a.name account, 
    o.total_amt_usd/(o.total + 0.01) unit_price
    FROM region r
    JOIN sales_reps s
    ON s.region_id = r.id
    JOIN accounts a
    ON a.sales_rep_id = s.id
    JOIN orders o
    ON o.account_id = a.id;


### Alias

Notice: We can simply write our alias directly after the column name (in the SELECT) or table name (in the FROM or JOIN) by writing the alias 
directly following the column or table we would like to alias. This will allow you to create clear column names even if calculations are used 
to create the column, and you can be more efficient 
with your code by aliasing table names.  
