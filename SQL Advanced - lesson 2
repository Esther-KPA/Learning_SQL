.sql

### UNION

/*
    There must be the same number of expressions in both SELECT statements.
    The corresponding expressions must have the same data type in the SELECT statements.
    For example:
        Expression1 must be the same data type in both the first and second SELECT statement. */

Expert Tip

    UNION removes duplicate rows.
    UNION ALL does not remove duplicate rows.

Example 01:

CREATE VIEW web_events_2
AS (SELECT * FROM web_events)

SELECT *
FROM web_events
UNION
SELECT *
FROM web_events_2

Example 02:

CREATE VIEW web_events_2
AS (SELECT * FROM web_events)

WITH web_events AS (
      SELECT *
      FROM web_events
      UNION ALL
      SELECT *
      FROM web_events_2
     )
SELECT channel,
       COUNT(*) AS sessions
FROM  web_events
GROUP BY 1
ORDER BY 2 DESC

Exercise 01:
Write a query that uses UNION ALL on two instances (and selecting all columns) of the accounts table. Then inspect the
results and answer the subsequent quiz.

Solution:
SELECT *
FROM accounts 
UNION ALL
SELECT *
FROM accounts

Exercise 02:
Add a WHERE clause to each of the tables that you unioned in the query above, filtering the first table where name equals Walmart 
and filtering the second table where name equals Disney.

Solution:
SELECT *
FROM accounts
WHERE names = 'Walmart'
UNION ALL
SELECT *
FROM accounts
WHERE names = 'Disney'

Solution 02
SELECT * FROM accounts WHERE name = 'Walmart' OR name = 'Disney'

Exercise 03:

Perform the union in your first query (under the Appending Data via UNION header) in a common table expression and name it 
double_accounts. Then do a COUNT the number of times a name appears in the double_accounts table. If you do this correctly, your 
query results should have a count of 2 for each name.

Solution:
WITH double_accounts AS (
    SELECT *
      FROM accounts

    UNION ALL

    SELECT *
      FROM accounts
)

SELECT name,
       COUNT(*) AS name_count
 FROM double_accounts 
GROUP BY 1
ORDER BY 2 DESC

### TUNING PERFORMANCE
Statements are true about tuning performance with LIMIT.

 If you have time series data, limiting to a small time window can make your queries run more quickly.

Testing your queries on a subset of data, finalizing your query, then removing the subset limitation is a sound strategy.

When working with subqueries, limiting the amount of data youâ€™re working with in the place where it will be executed first will 
have the maximum impact on query run time.

Example:
SELECT account_id,
       SUM(poster_qty) AS sum_poster_qty
FROM   (SELECT * FROM orders LIMIT 100) sub
WHERE  occurred_at >= '2016-01-01'
AND    occurred_at < '2016-07-01'
GROUP BY 1

## Aggregating before joining would improve query speed

Example 01:

SELECT accounts.name,
       COUNT(*) AS web_events
FROM accounts
JOIN web_events events
ON events.account_id = accounts.id
GROUP BY 1
ORDER BY 2 DESC

Query2 : Reduced run time

SELECT a.name,
       sub.web_events
FROM   (SELECT account.id,
       COUNT( AS web_events
       FROM web_events
        GROUP BY 1) sub
JOIN   accounts a 
ON     a.id = sub.account_id
ORDER BY 2 DESC
