.sql

### FULL OUTER JOIN

In some cases, you might want to include unmatched rows from both tables being joined. You can do this with a full outer join.
FULL OUTER JOIN Venn Diagram

Exapmle:
SELECT column_name(s)
FROM Table_A
FULL OUTER JOIN Table_B ON Table_A.column_name = Table_B.column_name;

** A full outer join returns unmatched records in each table with null values for the columns that came from the opposite table.
** If you wanted to return unmatched rows only, which is useful for some cases of data assessment, you can isolate them by adding
the following line to the end of the query:

WHERE Table_A.column_name IS NULL OR Table_B.column_name IS NULL
FULL OUTER JOIN with WHERE A.Key IS NULL OR B.Key IS NULL

Example:

each account who has a sales rep and each sales rep that has an account (all of the columns in these returned rows will be full)
but also each account that does not have a sales rep and each sales rep that does not have an account (some of the columns in these
returned rows will be empty)

This type of question is rare, but FULL OUTER JOIN is perfect for it.

Syntax for the question:

SELECT *
FROM accounts
FULL OUTER JOIN sales_reps ON accounts_id.name = region_id

Corrected solution:
SELECT *
  FROM accounts
 FULL JOIN sales_reps ON accounts.sales_rep_id = sales_reps.id
 
 If unmatched rows existed (they don't for this query), you could isolate them by adding the following line to the end of the query:

WHERE accounts.sales_rep_id IS NULL OR sales_reps.id IS NULL

Exercise 01; 
In the following SQL Explorer, write a query that left joins the accounts table and the sales_reps tables on each sale rep's ID number and joins 
it using the < comparison operator on accounts.primary_poc and sales_reps

Solution:
SELECT *
FROM accounts
LEFT JOIN sales_reps ON accounts.primary_poc < sales_reps.name

What is the relationship between accounts.primary_poc and sales_reps.name?

*** The primary point of contact's full name comes before the sales representative's name alphabetically

###SELF JOINS

Example:

SELECT o1.id AS o1_id,
       o1.account_id AS o1_account_id,
       o1.occurred_at AS o1_occurred_at,
       o2.id AS o2_id,
       o2.account_id AS o2_account_id,
       o2.occurred_at AS o2_occurred_at
FROM   orders o1
LEFT JOIN orders o2
ON     o1.account_id = o2.account_id
AND    o2.occurred_at > o1.occurred_at
AND    o2.occurred_at <= o1.occurred_at + INTERVAL '28 days'
ORDER BY o1.account_id, o1.occurred_at

*** o1 & o2 are the same tables, however to distinguish them, o1 & o2 is used.

Exercise 01:
Modify the query from the previous video, which is pre-populated in the SQL Explorer below, to perform the same interval 
analysis except for the web_events table. Also:

    -change the interval to 1 day to find those web events that occurred after, but not more than 1 day after, another web event
    -add a column for the channel variable in both instances of the table in your query


SELECT o1.id AS o1_id,
       o1.account_id AS o1_account_id,
       o1.occurred_at AS o1_occurred_at,
       o2.id AS o2_id,
       o2.account_id AS o2_account_id,
       o2.occurred_at AS o2_occurred_at,
       channel
  FROM web_events o1
 LEFT JOIN web-events o2
   ON o1.account_id = o2.account_id
  AND o2.occurred_at > o1.occurred_at
  AND o2.occurred_at <= o1.occurred_at + INTERVAL '1 day'
ORDER BY o1.account_id, o1.occurred_at

Corrected Solution:

SELECT we1.id AS we_id,
       we1.account_id AS we1_account_id,
       we1.occurred_at AS we1_occurred_at,
       we1.channel AS we1_channel,
       we2.id AS we2_id,
       we2.account_id AS we2_account_id,
       we2.occurred_at AS we2_occurred_at,
       we2.channel AS we2_channel
  FROM web_events we1 
 LEFT JOIN web_events we2
   ON we1.account_id = we2.account_id
  AND we1.occurred_at > we2.occurred_at
  AND we1.occurred_at <= we2.occurred_at + INTERVAL '1 day'
ORDER BY we1.account_id, we2.occurred_at


