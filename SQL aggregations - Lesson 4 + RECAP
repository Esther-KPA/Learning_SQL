.sql

### DATE FUNCTIONS

Example 01:

SELECT occurred_at,
       SUM(standard_qty) AS standard_qty_sum
FROM orders
GROUP BY occurred_at
ORDER BY occurred_at


Notice:

SELECT standard_qty, COUNT(*)
FROM orders
GROUP BY 1 (this 1 refers to standard_qty since it is the first of the columns included in the select statement)
ORDER BY 1 (this 1 refers to standard_qty since it is the first of the columns included in the select statement)

Example 02:

SELECT DATE_PART('dow',occurred_at) AS day_of_week,
       SUM(total) AS total_qty
FROM orders
GROUP BY 1
ORDER BY 2

Exercise 01:
    Find the sales in terms of total dollars for all orders in each year, ordered from greatest to least. Do you notice any trends in the yearly sales totals?
Solution:
 SELECT DATE_PART('year', occurred_at) ord_year,  SUM(total_amt_usd) total_spent
 FROM orders
 GROUP BY 1
 ORDER BY 2 DESC;

/*
When we look at the yearly totals, you might notice that 2013 and 2017 have much smaller totals than all other years. 
If we look further at the monthly data, we see that for 2013 and 2017 there is only one month of sales for 
each of these years (12 for 2013 and 1 for 2017). Therefore, neither of these is evenly represented. Sales 
have been increasing year over year, with 2016 being the largest sales to date. At this rate, we might expect 2017 to have the largest sales.  */

Exercise 02:
    Which month did Parch & Posey have the greatest sales in terms of total dollars? Are all months evenly represented by the dataset?

Solution:
SELECT DATE_PART('month', occurred_at) ord_month, SUM(total_amt_usd) total_spent
FROM orders
WHERE occurred_at BETWEEN '2014-01-01' AND '2017-01-01'
GROUP BY 1
ORDER BY 2 DESC; 


Exercise 03:
   Which year did Parch & Posey have the greatest sales in terms of the total number of orders? Are all years evenly represented by the dataset?

Solution:
SELECT DATE_PART('year', occurred_at) ord_year,  COUNT(*) total_sales
FROM orders
GROUP BY 1
ORDER BY 2 DESC;

/*
    Again, 2016 by far has the most amount of orders, but again 2013 and 2017 are not evenly represented to the other years in the dataset. */


Exercise 04:
    Which month did Parch & Posey have the greatest sales in terms of the total number of orders? Are all months evenly represented by the dataset?

Solution:
Are all months evenly represented by the dataset?December still has the most sales, but interestingly, 
November has the second most sales (but not the most dollar sales. To make a fair comparison from one month
to another 2017 and 2013 data were removed.

Exercise 05:
    In which month of which year did Walmart spend the most on gloss paper in terms of dollars?

Solution:

SELECT DATE_TRUNC('month', o.occurred_at) ord_date, SUM(o.gloss_amt_usd) tot_spent
FROM orders o 
JOIN accounts a
ON a.id = o.account_id
WHERE a.name = 'Walmart'
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;



### CASE STATEMENTS

Example 01;

SELECT id,
       account_id,
       occurred_at,
       channel,
       CASE WHEN channel = 'facebook' THEN 'yes' END AS is_facebook
FROM web_events
ORDER BY occurred_at

/*
END AS acts as the Alias "name of column" and the "yes" appears wherever the channel - facebook appears. */

Example 02;

SELECT id,
       account_id,
       occurred_at,
       channel,
       CASE WHEN channel = 'facebook' OR channel = 'direct' THEN 'yes' 
       ELSE 'no' END AS is_facebook
FROM web_events
ORDER BY occurred_at

Example 03;

SELECT account_id,
       occurred_at,
       total,
       CASE WHEN total > 500 THEN 'Over 500'
            WHEN total > 300 THEN '301 - 500'
            WHEN total > 100 THEN '101 - 300'
            ELSE '100 or under' END AS total_group
FROM orders

Exercise 01:
    Write a query to display for each order, the account ID, the total amount of the order, and the level of the order - ‘Large’ or ’Small’ - depending
on if the order is $3000 or more, or smaller than $3000

Solution:
SELECT account_id,
       total,
       CASE WHEN total >= 3000 THEN 'large'
            WHEN total < 3000 THEN 'small' 
            END AS order_level
FROM orders



 Exercise 02:   
    Write a query to display the number of orders in each of three categories, based on the total number of items in each order. The three 
    categories are: 'At Least 2000', 'Between 1000 and 2000' and 'Less than 1000'.

Solution:
SELECT CASE WHEN total >= 2000 THEN 'At Least 2000'
WHEN total >= 1000 AND total < 2000 THEN 'Between 1000 and 2000'
ELSE 'Less than 1000' END AS order_category,
COUNT(*) AS order_count
FROM orders
GROUP BY 1;


Exercise 03:
    We would like to understand 3 different levels of customers based on the amount associated with their purchases. The top-level 
    includes anyone with a Lifetime Value (total sales of all orders) greater than 200,000 usd. The second level is between 200,000 and 100,000 usd.
    The lowest level is anyone under 100,000 usd. Provide a table that includes the level associated with each account. You should provide the 
    account name, the total sales of all orders for the customer, and the level. Order with the top spending customers listed first.

Solution:
SELECT a.name, SUM(total_amt_usd) total_spent, 
  CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
  WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
  ELSE 'low' END AS customer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id 
GROUP BY a.name
ORDER BY 2 DESC;


Exercise 04:
    We would now like to perform a similar calculation to the first, but we want to obtain the total amount spent by customers only in 2016 and 2017. 
    Keep the same levels as in the previous question. Order with the top spending customers listed first.

Solution;
SELECT a.name, SUM(total_amt_usd) total_spent, 
  CASE WHEN SUM(total_amt_usd) > 200000 THEN 'top'
  WHEN  SUM(total_amt_usd) > 100000 THEN 'middle'
  ELSE 'low' END AS customer_level
FROM orders o
JOIN accounts a
ON o.account_id = a.id
WHERE occurred_at > '2015-12-31' 
GROUP BY 1
ORDER BY 2 DESC;


Exercise 05:
    We would like to identify top-performing sales reps, which are sales reps associated with more than 200 orders. Create a table with the 
    sales rep name, the total number of orders, and a column with top or not depending on if they have more than 200 orders. Place the top
    salespeople first in your final table.

Exercise 06:
    The previous didn't account for the middle, nor the dollar amount associated with the sales. Management decides they want to see these
    characteristics represented as well. We would like to identify top-performing sales reps, which are sales reps associated with more than 200 orders
    or more than 750000 in total sales. The middle group has any rep with more than 150 orders or 500000 in sales. Create a table with the sales rep name,
    the total number of orders, total sales across all orders, and a column with top, middle, or low depending on these criteria. 
    Place the top salespeople based on the dollar amount of sales first in your final table. You might see a few upset salespeople by this criteria!


#### RECAP OF AGGREGATIONS::
In this lesson, we covered and you can now:

    Deal with NULL values
    Create aggregations in your SQL Queries including
        COUNT
        SUM
        MIN & MAX
        AVG
        GROUP BY
        DISTINCT
        HAVING
    Create DATE functions
    Implement CASE statements

KeyTerm 	Definition
DISTINCT 	Always used in SELECT statements, and it provides the unique rows for all columns written in the SELECT statement.
GROUP BY 	Used to aggregate data within subsets of the data. For example, grouping for different accounts, different regions, 
or different sales representatives.
HAVING 	is the “clean” way to filter a query that has been aggregated
NULLs 	A datatype that specifies where no data exists in SQL
